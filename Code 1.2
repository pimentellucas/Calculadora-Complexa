#include <stdio.h>
#include <stdlib.h>
#include <math.h>


int main(){

char soma[150];
int n,sinala,sinalb,sinalc,sinald,tiponum1,tiponum2,operacao,result,repeat = 1;
double a,b,c,d,ai,bi,ci,di,ap,bp,resr,resi,pi;

// LEITURA DA SENTENçA

printf("Essa calculadora opera com numeros complexos da forma a+bi (retangular)\ne da forma c+dp (polar), sendo c o vetor e d o angulo\n");
printf("Pode se entrar quaisquer combinacoes dessas duas formas e os operadores:\n\nAdicao +\nSubtracao -\nDivisao /\nMultiplicacao *\nPotencia Inteira e\npara conversao entre as formas, entre apenas com o numero, sem operador\n\n");
printf("Entre com todos os valores, mesmo que iguais a 0, com i na forma retangualar\ne como p na forma polar\n\n");
printf("Caso a funcao principal tenha mais de um sinal para o mesmo numero, o segundo sinal sera ignorado.\n");
printf("Deve-se colocar o sinal de = ao final da sentença.\n\n");
do{

soma[0] = 0;
n = 0;              // as variaveis estao sendo deginidas dentro do "do" para que a cada vez que seja solicitado uma nova operacao, tudo seja resetado.
sinala = 0;
sinalb = 0;
sinalc = 0;
sinald = 0;
tiponum1 = 0;
tiponum2 = 0;
operacao = 5;
result = 2;
a = 0;
b = 0;
c = 0;
d = 0;
ai = 0;
bi = 0;
ci = 0;
di = 0;
ap = 0;
bp = 0;
resr = 0;
resi = 0;
pi = 3.14159265358979323846;

printf("Entre com a sentenca:\n");
scanf(" %[^\n]s", soma); // o espaço entre a " e o % serve para limpar o buffer

while(soma[n] != '-' && soma[n] != '+' &&  (soma[n] < 48 || soma[n] > 57) && soma[n] != 's'){
    n = n+1;
}                   //Essa função se repete ao longo do TP com o intuito de eliminar os lixos de digitação, sendo que em cada situação elimina lixos especificos
                    //Nessa casa da string tem-se como caracteres validos + - um algarismo ou o "s", para sair.
if(soma[0] == 's'){
    exit(0);
}

if (soma[n] == '-'){
    sinala = 1;
    n = n+1;
}
while(soma[n] < 48 || soma[n] > 57){        //como o programa nao foi encerrado com a função sair,
        n = n+1;                            //achado o sinal do primeiro numero, apenas um numero é admitido como caracter valido
}

if (soma[n] == '+'){
   n = n+1;
}

while(soma[n] < 48 || soma[n] > 57){         //mesmo caso do sinal negativo como primeiro caracter da string.
    n = n+1;
}

while(soma[n] != '-' && soma[n] != '+'){     //nessa parte o programa percorre a string ate que se ache um sinal de + ou -, referente a parte imaginaria do primeiro numero.
        a = (a * 10) + (soma[n] - 48);
    n = n + 1;

    while(soma[n] != '-' && soma[n] != '+'&&  (soma[n] < 48 || soma[n] > 57)){  //sao validos caracteres como os sinais de positivo e nagativo ou algarismos.
        n = n+1;
    }
}

if (soma[n] == '-'){    //caso a parte imaginaria do primeiro numero seja negativa, tem-se uma flag.
    sinalb = 1;
}
n = n+1;

while(soma[n] < 48 || soma[n] > 57){    //achado o sinal da parte imaginaria do primeiro numero, apenas se admite algarismos como valido.
    n = n+1;
}

while (soma[n] != 'i'  && soma[n] != 'p'){  //percorre-se a string, formando o segundo numero, até que p ou i sejam identificados, indicando que a parte imaginaria do primeiro numero acabou.
    b = (b * 10) + (soma[n] - 48);
    n = n + 1;

    while((soma[n] < 48 || soma[n] > 57) && soma[n] != 'i' && soma[n] != 'p'){    //apenas i, p ou um algarismo são considerados validos nessa parte.
        n = n+1;
    }
}

if(soma[n] == 'p'){     //caso seja encontrado p, levanta uma flag, indicando que o numero é polar.
    tiponum1 = 1;
}
n = n+1;
    while(soma[n] != '+' && soma[n] != '-' && soma[n] != '*' && soma[n] != '/' && soma[n] != 'e' && soma[n] != '='){
    n = n+1;
}

if(soma[n] == '+'){                             //Soma
  operacao = 0;}
    else
        if(soma[n] == '-'){                     //Subtração
    operacao = 1;}
        else
            if(soma[n] == '*'){                 //multiplicação
        operacao = 2;}
            else
                if(soma[n] == '/'){             //Divisão
            operacao = 3;}
                else
                    if(soma[n] == 'e'){         // Potencia
                operacao = 4;}
                        if(soma[n] == '='){     // Converter Polar retangular
                    operacao = 5;}
n = n+1;

            //COLOCAR UM WHILE PRA PULAR TUDO NO CASO DE CONVERSÃO

    while((soma[n] < 48 || soma[n] > 57) && soma[n] != '-'){      //são validos os algarismo e um caracter de -. o caracter de + é desnecessario.{
    n = n+1;
}

if (soma[n] == '-'){
    sinalc = 1;
    n = n+1;
}
while(soma[n] < 48 || soma[n] > 57){            //nesse caso se e aceito um algarismo como caracter valido
    n = n+1;
}

if (soma[n] == '+'){
    sinalc = 0;
    n = n+1;
}
while(soma[n] < 48 || soma[n] > 57){            //nesse caso se e aceito um algarismo como caracter valido
    n = n+1;
}

if(operacao == 0 || operacao == 1 || operacao == 2 || operacao == 3){
    while (soma[n] != '+' && soma[n] != '-'){
        c = (c * 10) + (soma[n] - 48);
        n = n + 1;
        while((soma[n] < 48 || soma[n] > 57) && soma[n] != '+' && soma[n] != '-'){    // a leitura do segundo numero se da de maneira analoga a do primeiro numero.
            n = n+1;
        }
    }

    if (soma[n] == '-'){
        sinald = 1;
    }
    n = n+1;

    while(soma[n] < 48 || soma[n] > 57){
        n = n+1;
    }

    while (soma[n] != 'i'  && soma[n] != 'p'){
        d = (d * 10) + (soma[n] - 48);
        n = n + 1;
        while((soma[n] < 48 || soma[n] > 57) && soma[n] != 'i' && soma[n] != 'p'){
                n = n+1;
        }
    }
    if(soma[n] == 'p'){
            tiponum2 = 1;
    }
}

if (operacao == 4){
    c = soma[n] -48;
}

//NUMEROS NEGATIVOS                  nesse momento, caso alguma flag de numero negativo tenha sido ativada, ele sera multiplicado por -1

if(sinala == 1){
    a = a * (-1);
}
if(sinalb == 1){
    b = b * (-1);
}
if(sinalc == 1){
    c = c * (-1);
}
if(sinald == 1){
    d = d * (-1);
}

//CONVERSãO RETANGULAR/POLAR        nesse momento, todos os numeros são convertidos para ambas as formas

    if (tiponum1 == 1){
    ap = a;
    bp = b;
    ai = cos(b * pi/180) * a;
    bi = sin(b * pi/180) * a;
}
if(tiponum2 == 1){
    ci = cos(d * pi/180) * c;
    di = sin(d * pi/180) * c;
}
if(tiponum1 == 0){
    ap = sqrt((a*a)+(b*b));
    bp = (atan(b/a)* (180/pi));
    ai = a;
    bi = b;
}
if(tiponum2 == 0){
    ci = c;
    di = d;
}

//OPERAÇÕES

//soma
if (operacao == 0){
        resr = ai + ci;
        resi = bi + di;
}
//subtraÇÂo
if (operacao == 1){
        resr = ai - ci;
        resi = bi - di;
}
//multiplicaÇÃo
if (operacao == 2){
        resr = (ai*ci) - (bi*di);
        resi = (ai*di) + (bi*ci);
}
//divisÃo
if (operacao == 3){
    resr = ((ai*ci)+(bi*di))/((ci*ci)+(di*di));
    resi = ((bi*ci)-(ai*di))/((ci*ci)+(di*di));
}

//potenciaÇÃo
if (operacao == 4){
        resr = ai;
        resi = bi;
    while(c > 1){
        a = resr;
        b = resi;
        resr = (a*ai) - (b*bi);
        resi = (a*bi) + (b*ai);
        c = c - 1;
    }
}
//conversÃo
if(operacao == 5){
    if(tiponum1 == 0){
        resr = ap;
        resi = bp;
        printf("o numero na forma polar e:\n%.2lf + %.2lfp\n", resr, resi);
    }
    if(tiponum1 == 1){
        resr = ai;
        resi = bi;
        printf("o numero na forma retangular e:\n%.2lf + %.2lfi\n", resr, resi);
    }
}

//resultado
if(operacao == 0 || operacao == 1 || operacao == 2 || operacao == 3 ||operacao == 4){

    while(result != -1){
        printf("Escolha a forma de apresentacao do resultado:\n(0)Retangular\n(1)Polar\n");
        scanf("%d", &result);
        if(result == 0){
                printf("o resultado e:\n%.2lf + %.2lfi\n", resr, resi);
                result = -1;
        }
        else
            if(result == 1){
                ap = sqrt((resr*resr)+(resi*resi));                 //aqui aproveito as variaveis ap e bp que nao estavam sendo mais utilizadas, para fazer a conversão
                bp = (atan(resi/resr)* (180/pi));                   //caso seja solicitado resultado polar
                printf("o resultado e:\n%.2lf + %.2lfp\n", ap, bp);
                result = -1;
            }
            else
                printf("Apenas 0 e 1 sao aceitos.\n");
    }
}
} while(repeat == 1);

return 0;
}
